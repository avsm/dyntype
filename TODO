Known issues and TODO list before a 1.0 release. Until then, the 
ORM is a work-in-progress and anything is subject to change dramatically!

Issues:
-------

- Type-of/Value:
   * handle type x = { x : M.t }
   * handle type 'a x = {x : 'a }
   * for Value, handle Bigint.t (and integers of range > 64)

- Hash: fix the computation of hashed value for Foo of int * int * 
  int (currently only consider the 1st argument), best to rewrite 
  using type-of.

- ORM:
   * signature generator
   * type-check for recursion going through list/option fields.
   * labelled args for the get function
   * save of recursive value should create a new value only if it is
     not already existing
   * type t = ... with orm;; type x = ... with orm should work
   * handle type t = { x : M.t }
   * handle type 'a t = { x : 'a }

Interface changes:
-----------------

- Add a x_fold function to match the x_get function

- Sqlite CONSTRAINT errors for uniqueness violations (e.g. on a unique
  indexed field) need to be exposed better than just throwing up the 
  CONSTRAINT error which is really hard to track down.

Optimization:
------------

- Bind sqlite3_profile to make that information available.

Nice to have:
------------

- A field name of "id" in a record will cause an error; type
  checker should reject these or rewrite them into something different.

- Warn on reserved keywords in types (id, from) which are not
  valid SQL field names (or transform them to be safe).

- Support polymorphic variant types and reference types.

- Add foreign key constraints for sanity checking in debug mode.
  Not strictly needed, but an additional integrity check

- Generate smart ocamldoc; not sure if this is possible with camlp4
  extensions without a custom doc generator.
